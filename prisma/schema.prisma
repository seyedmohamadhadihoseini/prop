// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int             @id @default(autoincrement())
  type               UserType        @default(Customer)
  email              String          @unique
  firstName          String
  lastName           String
  password           String
  referralCode       Int             @unique @default(0)
  parentReferralCode Int?
  profile            String?
  address            String?
  telephone          String?
  identity           String?
  brithDate          DateTime?
  verifyLevel        VerifySteps?    @default(nothing)
  sessions           SessionSave[]
  Ticket             Ticket[]
  TicketMessage      TicketMessage[]
  Challenge          Challenge[]
}

model Admin {
  uuid String @id
  name String
}

enum VerifySteps {
  nothing
  Pending
  rejected
  Yes
}

enum UserType {
  Customer
  Admin
}

model confirmCode {
  id       String @unique
  code     String
  email    String
  password String
}

model SessionSave {
  id     String @unique
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId Int
}

model TicketCategory {
  name   String   @id
  Ticket Ticket[]
}

model Ticket {
  id            Int             @id @default(autoincrement())
  accountNumber Int
  title         String
  content       String
  userId        Int
  user          User            @relation(references: [id], fields: [userId], onDelete: Cascade)
  level         TicketLevel     @default(Pending)
  attachedFile  String?
  TicketMessage TicketMessage[]
  categoryName  String
  category      TicketCategory  @relation(references: [name], fields: [categoryName], onDelete: Cascade)
}

model TicketMessage {
  id         Int       @id @default(autoincrement())
  text       String    @db.LongText
  date       DateTime?
  isFromUser Boolean   @default(true)
  ticketId   Int
  ticket     Ticket    @relation(references: [id], fields: [ticketId], onDelete: Cascade)
  userId     Int
  user       User      @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum TicketLevel {
  Pending
  Answered
  Closed
}

model MailConfiguration {
  host String @unique
  port Int
  user String
  pass String
}

model ChallengeSetting {
  id          Int         @id @default(autoincrement())
  name        String
  balance     Int
  price       Int
  description String
  isEnable    Boolean     @default(true)
  challenge   Challenge[]
}

model Challenge {
  id        Int              @id @default(autoincrement())
  settingId Int
  setting   ChallengeSetting @relation(references: [id], fields: [settingId])
  userId    Int
  user      User             @relation(references: [id], fields: [userId])
  isPaid   Boolean          @default(false)
  date      DateTime         @default(now())
}
